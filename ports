#!/bin/bash

get_portpath() {
	local r
	
	if [ -z "$portname" ]; then
		echo "Please define port name."
		exit 2
	fi
	
	for r in ${PORTREPO[@]}; do
		if [ -f $r/$portname/spkgbuild ]; then
			portpath=$r/$portname
			break
		fi
	done
	
	if [ -z "$portpath" ]; then
		echo "Port '$portname' not exist."
		exit 1
	fi
}

reset_changes() {
	echo -n "Error occurs. Do you want to revert changes? Y/n "
	read -n1 input
	
	case $input in
		N|n) echo "Changes is kept.";;
		*)   echo "Revert changes..."
		     echo -n '> spkgbuild  : '; git checkout spkgbuild
		     echo -n '> .checksums : '; git checkout .checksums
		     echo -n '> .pkgfiles  : '; git checkout .pkgfiles;;
	esac
	exit 4
}

isinstalled() {
	if [ -s $INDEX_DIR/$1/.pkginfo ] && [[ $(grep $1 $INDEX_DIR/$1/.pkginfo) ]]; then
		return 0
	else
		return 1
	fi
}

get_depends() {	
	grep "^# depends[[:blank:]]*:" $portpath/spkgbuild \
	| sed 's/^# depends[[:blank:]]*:[[:blank:]]*//' \
	| tr ' ' '\n' \
	| awk '!a[$0]++' \
	| sed 's/,//'
}

update_port() {
	get_portpath
	
	if [ -z "$upversion" ]; then
		echo "Please define version to update."
		exit 2
	fi
	
	deps=$(get_depends)
	for d in $deps; do
		found=0
		if ! isinstalled $d; then
			echo "Dependency not installed: $d"
			for r in ${PORTREPO[@]}; do
				if [ -f "$r/$d/spkgbuild" ]; then
					found=1
					break
				fi
			done
			if [ "$found" != 1 ]; then
				echo "Missing dependency port: $d"
			fi
			exit 1
		fi
	done
	
	pushd $portpath >/dev/null
	
	# update version
	sed -i "/^version=/s/=.*/=$upversion/" spkgbuild
	
	# change release to 1
	sed -i "/^release=/s/=.*/=1/" spkgbuild
	
	while true; do
	cat spkgbuild | more
	echo
	
		while true; do
			echo -n "[E]dit [A]bort [C]ontinue ? "
			read -n1 input
			echo
			case $input in
				E|e) vim spkgbuild
				     break 1;;
				A|a) exit 1;;
				*)   break 2;;
			esac
		done
	done			
	
	fakeroot pkgbuild -o || reset_changes
	fakeroot pkgbuild -g || reset_changes
	fakeroot pkgbuild    || reset_changes
	fakeroot pkgbuild -p || reset_changes
	sudo pkgbuild -uv
	
	popd >/dev/null
}

commit_port() {
	if [ -z "$portname" ]; then
		for port in $(git diff --name-only ${PORTREPO[@]} | awk -F / '{print $2}' | uniq); do
			portname=$port
			commit_port2
		done
	else
		commit_port2
	fi	
}

commit_port2() {
	get_portpath
	
	pushd $portpath >/dev/null
	
	deps=$(get_depends)
	for d in $deps; do
		found=0
		for r in ${PORTREPO[@]}; do
			if [ -f "$r/$d/spkgbuild" ]; then
				found=1
				break
			fi
		done
		if [ "$found" != 1 ]; then
			echo "Missing dependency port: $d"
			missing=1
		fi
	done
	
	[ "$missing" = 1 ] && exit 1
	
	. spkgbuild
	commitmsg="$name: updated to $version"
	
	echo "Generate .checksums for $name..."
	fakeroot pkgbuild -g
	echo "Generate .pkgfiles for $name..."
	fakeroot pkgbuild -p
	
	git add .
	git commit -m "$commitmsg"
	
	popd >/dev/null
}

repgen_repo() {
	if [ ! $(type -pa httpup-repgen) ]; then
		echo "httpup not installed, aborting"
		exit 1
	fi
	
	for r in ${PORTREPO[@]}; do
		httpup-repgen $r
	done
}

push_repo() {
	#if git status | grep "Your branch is up to date"; then
	#	return 0
	#fi
	
	if git diff --name-only ${PORTREPO[@]} | grep -v REPO; then
		echo
		echo "Please commit above changes first."
		return 2
	fi
	
	repgen_repo
	
	for r in ${PORTREPO[@]}; do
		git add $r
	done
	
	git commit -m "REPO updated"
	git push
}

diff_repo() {
	get_portpath
	
	pushd $portpath >/dev/null

	git diff .
	
	popd >/dev/null
}

show_status() {
	git status | grep "Your branch is ahead of" && echo
	git status | grep -v REPO | grep modified | sed 's/.*modified:/modified:/g'
}

showhelp() {
	cat << EOF
Usage:
  $(basename $0) <options> [ arg ]
  
Options:
  -u <portname> <newversion>   update ports to <newversion>
  -c <portname>                commit port's update changes
  -d <portname>                show diff of ports
  -r                           update REPO file
  -p                           push all updates
  -s                           show current status
  -h                           show this help message
      
EOF
}

parseopt() {
	while [ "$1" ]; do
		case $1 in
			-u) updateport=1
			    portname=$2
			    upversion=$3
			    shift 2;;
			-c) commitchanges=1
			    portname=$2
			    shift ;;
			-r) repgenrepo=1;;
			-p) pushrepo=1;;
			-d) diffrepo=1
			    portname=$2
			    shift;;
			-s) showstatus=1;;
			-h) showhelp;;
			*)  echo "Run '$(basename $0) -h' to see available options."; exit 1;;
		esac
		shift
	done
}

main() {
	parseopt $@
	
	if [ "$updateport" ]; then
		update_port
		return 0
	fi
	
	if [ "$commitchanges" ]; then
		commit_port
		return 0
	fi
	
	if [ "$repgenrepo" ]; then
		repgen_repo
		return 0
	fi
	
	if [ "$diffrepo" ]; then
		diff_repo
		return 0
	fi
	
	if [ "$pushrepo" ]; then
		push_repo
		return 0
	fi
	
	if [ "$showstatus" ]; then
		show_status
		return 0
	fi
}

PORTREPO=(core extra multilib xorg community)
INDEX_DIR="/var/lib/scratchpkg/index"

main $@

exit $?
